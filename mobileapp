import io.appium.java_client.MobileElement;
import io.appium.java_client.android.AndroidDriver;

import org.openqa.selenium.By;

import org.openqa.selenium.remote.DesiredCapabilities;

import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.net.MalformedURLException;
import java.net.URL;


public class mobileandroid {
    private AndroidDriver<MobileElement> driver;

    @BeforeClass
    public void setUp() throws MalformedURLException {
        // Set up desired capabilities
        DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setCapability("platformName", "Android");
        capabilities.setCapability("deviceName", "Pixel7");
        capabilities.setCapability("appPackage", "com.example.app");
        capabilities.setCapability("appActivity", "com.example.app.MainActivity");
        capabilities.setCapability("automationName", "UiAutomator2");

        // Initializing the driver
        driver = new AndroidDriver(new URL("http://localhost:4723/wd/hub"), capabilities);

    }

    @Test
    public void testLogin() {
        //Sample login scenario for an application
        MobileElement username = driver.findElement(By.id("//android.widget.EditText[@text='username']"));
        username.sendKeys("validUsername");


        MobileElement password = driver.findElement(By.id("//android.widget.EditText[@text='password']"));
        password.sendKeys("validPassword");


        MobileElement login = driver.findElement(By.id("//android.widget.EditText[@text='Login']"));
        login.click();

        WebDriverWait wait = new WebDriverWait(driver,10);
        MobileElement Loggedin = (MobileElement) wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//android.widget.Textview[@text='Loggedin']")));

        Loggedin.getText();
        System.out.println("Log in Successful");

    }

    @AfterClass
    public void tearDown() {
        //just to avoid null pointer exception and then driver.quit after testcase finishes.
        if (driver != null) { 
            driver.quit();
        }
    }
}
